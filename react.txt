
import './App.css';
import React, { useState, useEffect } from 'react';

import axios from 'axios';

import * as THREE from 'three';

import OrbitControls from 'three-orbitcontrols';



const NASA_API_BASE_URL = 'https://data.nasa.gov/resource/b67r-rgxc.json';


const App = () => {

  const [celestialBodiesData, setCelestialBodiesData] = useState([]);


  useEffect(() => {

    const fetchCelestialBodiesData = async () => {

      try {

        const response = await axios.get(NASA_API_BASE_URL);

        const data = response.data.map(item => ({

          name: item.name,

          diameter: item.diameter_km,

          x: item.x_km,

          y: item.y_km,

          z: item.z_km,

          color: item.color

        }));

        setCelestialBodiesData(data);

      } catch (error) {

        console.error('Error fetching celestial bodies data:', error);

      }

    };


    fetchCelestialBodiesData();

  }, []);


  

  const scene = new THREE.Scene();

  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

  camera.position.z = 5;


  

  const renderer = new THREE.WebGLRenderer();

  renderer.setSize(window.innerWidth, window.innerHeight);

  document.body.appendChild(renderer.domElement);


  

  const controls = new OrbitControls(camera, renderer.domElement);


  

  const celestialBodies = [];

  celestialBodiesData.forEach(body => {

    const geometry = new THREE.SphereGeometry(body.diameter / 2, 32, 32);

    const material = new THREE.MeshBasicMaterial({ color: body.color });

    const mesh = new THREE.Mesh(geometry, material);

    mesh.position.set(body.x, body.y, body.z);

    scene.add(mesh);

    celestialBodies.push(mesh);

  });


  

  const animate = () => {

    requestAnimationFrame(animate);

    renderer.render(scene, camera);

  };

  animate();

};


export default App;